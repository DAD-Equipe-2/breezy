events {
    worker_connections 1024;
}

http {
    
    server {
        listen 8080;
        server_name localhost;

        root /usr/share/nginx/html;

        # --- DOCUMENTATION ---
        location /api/docs/ {
            proxy_pass http://documentation-service:3000/;
        }

        location /api/v1/auth/docs/swagger.json {
            proxy_pass http://auth-service:3000/docs/swagger.json;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/gateway/docs/swagger.json {
            proxy_pass http://gateway-service:3000/docs/swagger.json;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/users/docs/swagger.json {
            proxy_pass http://user-service:3000/docs/swagger.json;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/posts/docs/swagger.json {
            proxy_pass http://post-service:3000/docs/swagger.json;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- AUTH FUNCTIONNALITIES ---
        location /api/v1/gateway/register {
            proxy_pass http://gateway-service:3000/register;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/auth/login {
            proxy_pass http://auth-service:3000/login;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/auth/logout {
            proxy_pass http://auth-service:3000/logout;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/v1/auth/renew {
            proxy_pass http://auth-service:3000/renew;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- INTERNAL VERIFICATION endpoint (not directly accessible) ---
        location /verify {
            # Handle CORS preflight requests
            if ($request_method = OPTIONS) {
                return 204;
            }

            internal;  # Prevents direct access from outside

            proxy_pass_request_body off;                    # Do not forward body
            proxy_set_header Content-Length "";             # Clear Content-Length header
            proxy_set_header X-Original-URI $request_uri;   # Original request URI

            # Forward the Authorization header (e.g. JWT token)
            proxy_set_header Authorization $http_authorization;

            # Pass the request to the auth service
            proxy_pass http://auth-service:3000/verify;
        }

        # --- USER SERVICE ---
        location /api/v1/users/ {
            auth_request /verify;

            # Extract headers from auth service's response
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_role $upstream_http_x_user_role;

            # Forward them to the backend
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Role $user_role;

            proxy_pass http://user-service:3000/;

            # Set headers for the proxied request
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # --- POST SERVICE ---
        location /api/v1/posts/ {
            auth_request /verify;

            # Extract headers from auth service's response
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_role $upstream_http_x_user_role;

            # Forward them to the backend
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Role $user_role;

            proxy_pass http://post-service:3000/;

            # Set headers for the proxied request
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }
}